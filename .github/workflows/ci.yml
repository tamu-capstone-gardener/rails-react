name: CI

env:
  POSTGRES_USER: postgres
  POSTGRES_PASSWORD: password
  POSTGRES_DB: ruby_react_test

on:
  pull_request:
  push:
    branches: [main]

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      ruby-version: ${{ steps.ruby-version.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Extract Ruby version
        id: ruby-version
        run: echo "version=$(cat .ruby-version)" >> $GITHUB_OUTPUT

      - name: Cache gems
        uses: actions/cache@v4
        with:
          path: vendor/bundle
          key: gems-${{ runner.os }}-${{ steps.ruby-version.outputs.version }}-${{ hashFiles('**/Gemfile.lock') }}
          restore-keys: |
            gems-${{ runner.os }}-${{ steps.ruby-version.outputs.version }}-

  scan_ruby:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ needs.setup.outputs.ruby-version }}
          bundler-cache: true

      - name: Run Brakeman for security vulnerabilities
        run: bin/brakeman --no-pager

  scan_js:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ needs.setup.outputs.ruby-version }}
          bundler-cache: true

      - name: Run Importmap Audit for JavaScript dependencies
        run: bin/importmap audit

  lint:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ needs.setup.outputs.ruby-version }}
          bundler-cache: true

      - name: Run Rubocop
        run: bin/rubocop -f github

  test:
    runs-on: ubuntu-latest
    needs: setup
    services:
      postgres:
        image: postgres
        env:
          POSTGRES_USER: ${{ env.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U postgres"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - name: Install postgres client
        run: sudo apt-get install libpq-dev

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ needs.setup.outputs.ruby-version }}
          bundler-cache: true

      - name: Set Rails Master Key
        env:
          RAILS_MASTER_KEY: ${{ secrets.RAILS_MASTER_KEY }}
        run: echo "$RAILS_MASTER_KEY" > config/master.key

      - name: Install Bundler
        run: gem install bundler

      - name: Install Gems
        run: bundle install --deployment --without development production

      - name: Set up database
        run: |
          bundle exec rails db:create db:migrate RAILS_ENV=test

      - name: Run tests
        run: bundle exec rspec --format documentation --color

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-report
          path: coverage/
